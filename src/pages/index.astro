---
import "../styles/global.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ogp2hugolinkcard-web</title>
  </head>
  <body class="bg-zinc-900 text-zinc-100 font-sans p-8 max-w-[700px] mx-auto">
    <h1 class="text-2xl mb-1">ogp2hugolinkcard-web</h1>
    <p class="text-zinc-400 mb-8 text-sm">
      Generate a Hugo <code>linkCard</code> shortcode from any URL.<br />
      Web version of the <a
        href="https://github.com/ryoma-yama/ogp2hugolinkcard"
        class="text-blue-400 underline">ogp2hugolinkcard</a
      > CLI.
    </p>

    <form id="ogp-form" class="flex gap-2 mb-8">
      <input
        type="url"
        id="url-input"
        placeholder="https://..."
        required
        class="flex-grow px-3 py-2 text-base rounded border border-zinc-700 bg-zinc-800"
      />
      <button
        type="submit"
        class="cursor-pointer px-4 py-2 text-white bg-green-500 rounded font-semibold text-base"
        >Create Link Card</button
      >
    </form>

    <div
      id="preview"
      class="hidden bg-zinc-800 rounded-lg overflow-hidden mb-8"
    >
      <img
        id="preview-img"
        src=""
        alt="Link preview image"
        class="w-[150px] object-cover"
      />
      <div class="p-4">
        <div id="preview-title" class="text-lg font-semibold mb-2"></div>
        <div id="preview-desc" class="text-sm text-zinc-400 mb-2"></div>
        <div id="preview-url" class="text-xs text-blue-400"></div>
      </div>
    </div>

    <div class="relative mb-8">
      <button
        id="copy-button"
        aria-label="Copy shortcode to clipboard"
        class="absolute top-2 right-2 bg-zinc-700 text-zinc-100 rounded px-2 py-1 text-xs"
        >Copy</button
      >
      <div
        id="code"
        class="bg-zinc-800 p-4 rounded font-mono whitespace-pre-wrap"
      >
        The Hugo shortcode will appear here.
      </div>
    </div>

    <script>
      const formEl = document.getElementById("ogp-form");
      const inputEl = document.getElementById("url-input");
      const previewEl = document.getElementById("preview");
      const codeEl = document.getElementById("code");
      const imgEl = document.getElementById("preview-img");
      const titleEl = document.getElementById("preview-title");
      const descEl = document.getElementById("preview-desc");
      const urlTextEl = document.getElementById("preview-url");
      const copyButtonEl = document.getElementById("copy-button");

      if (
        formEl instanceof HTMLFormElement &&
        inputEl instanceof HTMLInputElement &&
        previewEl instanceof HTMLElement &&
        codeEl instanceof HTMLElement &&
        imgEl instanceof HTMLImageElement &&
        titleEl instanceof HTMLElement &&
        descEl instanceof HTMLElement &&
        urlTextEl instanceof HTMLElement &&
        copyButtonEl instanceof HTMLButtonElement
      ) {
        formEl.addEventListener("submit", async (e) => {
          e.preventDefault();
          codeEl.textContent = "Fetching...";
          previewEl.classList.toggle("hidden", true);
          previewEl.classList.remove("flex");

          try {
            const res = await fetch(
              `/api/ogp?url=${encodeURIComponent(inputEl.value)}`,
            );
            if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
            const text = await res.text();
            codeEl.textContent = text;

            const titleMatch = text.match(/title="([^"]+)"/);
            const descMatch = text.match(/description="([^"]+)"/);
            const imageMatch = text.match(/image="([^"]+)"/);

            titleEl.textContent = titleMatch?.[1] || "";
            descEl.textContent = descMatch?.[1] || "";
            imgEl.src = imageMatch?.[1] || "";
            urlTextEl.textContent = inputEl.value;

            previewEl.classList.toggle("hidden", false);
            previewEl.classList.add("flex");
          } catch (err) {
            codeEl.textContent =
              "Error: " + (err instanceof Error ? err.message : String(err));
          }
        });

        copyButtonEl.addEventListener("click", () => {
          const text = codeEl.textContent || "";
          navigator.clipboard.writeText(text).then(() => {
            copyButtonEl.textContent = "Copied!";
            setTimeout(() => (copyButtonEl.textContent = "Copy"), 1500);
          });
        });
      }
    </script>
  </body>
</html>
